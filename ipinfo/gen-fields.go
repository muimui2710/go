// +build ignore

package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"log"
	"text/template"
)

type templateData struct {
	Getters []*Getter
}

type Getter struct {
	Name string
	Tag  string
}

const source = `// Code generated by gen-fields; DO NOT EDIT.

package ipinfo // import "github.com/ipinfo/go/ipinfo"

import (
	"bytes"
	"net"
)

{{range .Getters}}
// Get{{.Name}} returns a specific field "{{.Tag}}" value from the
// API for the provided ip. If nil was provided instead of ip, it returns
// details for the caller's own IP.
func Get{{.Name}}(ip net.IP) (string, error) {
	return c.Get{{.Name}}(ip)
}

// Get{{.Name}} returns a specific field "{{.Tag}}" value from the
// API for the provided ip. If nil was provided instead of ip, it returns
// details for the caller's own IP.
func (c *Client) Get{{.Name}}(ip net.IP) (string, error) {
	s := "{{.Tag}}"
	if ip != nil {
		s = ip.String() + "/" + s
	}
	if c.Cache == nil {
		return c.request{{.Name}}(s)
	}
	v, err := c.Cache.GetOrRequest(s, func() (interface{}, error) {
		return c.request{{.Name}}(s)
	})
	if err != nil {
		return "", err
	}
	return v.(string), err
}

func (c *Client) request{{.Name}}(s string) (string, error) {
	req, err := c.NewRequest(s)
	if err != nil {
		return "", err
	}
	v := new(bytes.Buffer)
	_, err = c.Do(req, v)
	if err != nil {
		return "", err
	}
	return v.String(), nil
}
{{end}}
`

func main() {
	sourceTmpl := template.Must(template.New("source").Parse(source))
	filename := "ipinfo-fields.go"
	t := &templateData{
		Getters: []*Getter{
			&Getter{
				Name: "Hostname",
				Tag:  "hostname",
			},
			&Getter{
				Name: "Organization",
				Tag:  "org",
			},
			&Getter{
				Name: "City",
				Tag:  "city",
			},
			&Getter{
				Name: "Region",
				Tag:  "region",
			},
			&Getter{
				Name: "Country",
				Tag:  "country",
			},
			&Getter{
				Name: "Location",
				Tag:  "loc",
			},
			&Getter{
				Name: "Phone",
				Tag:  "phone",
			},
			&Getter{
				Name: "Postal",
				Tag:  "postal",
			},
			&Getter{
				Name: "Timezone",
				Tag:  "timezone",
			},
		},
	}

	log.Println("Generating...")
	var buf bytes.Buffer
	if err := sourceTmpl.Execute(&buf, t); err != nil {
		log.Fatal(err)
	}

	log.Println("Formatting...")
	formattedSrc, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("Writing %v...", filename)
	if err := ioutil.WriteFile(filename, formattedSrc, 0644); err != nil {
		log.Fatal(err)
	}

	log.Print("Done.")
}
